apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'realm-android'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.davidmiguel.gobees"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled true
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    // Mock: stubs out the service layer completely and returns a fake dataset
    // Prod: production version
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // android.jar methods return either null or zero, not throw exceptions
    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Always show the result of every unit test, even if it passes
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

sourceSets {
    test {
        java.srcDirs = ['src/test/res']
    }
}

dependencies {
    // App's dependencies, including test
    compile 'com.android.support:recyclerview-v7:25.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.github.davidmigloz:opencv-android-gradle-repo:3.1.0'
    compile 'com.google.guava:guava:20.0'
    compile 'com.makeramen:roundedimageview:2.2.1'

    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.slf4j:slf4j-api:1.7.21'
    testCompile 'org.slf4j:slf4j-log4j12:1.7.21'
    testCompile 'log4j:log4j:1.2.17'

    // Android Testing Support Library's runner and rules
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    // Dependencies for Android unit tests
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:2.2.22'

    // Espresso UI Testing
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'

    // Resolve conflicts between main and test APK:
    androidTestCompile 'com.android.support:support-annotations:25.0.1'
    androidTestCompile 'com.android.support:support-v4:25.0.1'
    androidTestCompile 'com.android.support:recyclerview-v7:25.0.1'
    androidTestCompile 'com.android.support:appcompat-v7:25.0.1'
    androidTestCompile 'com.android.support:design:25.0.1'
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

/*
Copy test resources directory (test/mock/debug).
*/
task copyResDirectoryToTestMockDebugClasses(type: Copy) {
    from "${projectDir}/src/test/res"
    into "${buildDir}/intermediates/classes/test/mock/debug/res"
}

/*
Run copy test resources directory tasks before build.
*/
afterEvaluate {
    preBuild.dependsOn(copyResDirectoryToTestMockDebugClasses)
}