apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "com.davidmiguel.gobees"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        // android.jar methods return either null or zero, not throw exceptions
        unitTests.returnDefaultValues = true
    }

    testOptions.unitTests.all {
        // Always show the result of every unit test, even if it passes
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

sourceSets {
    test {
        java.srcDirs = ['src/test/res']
    }
}

dependencies {
    // App's dependencies, including test
    compile "com.android.support:appcompat-v7:25.0.0"
    compile "com.android.support:cardview-v7:25.0.0"
    compile "com.android.support:recyclerview-v7:25.0.0"
    compile "com.github.davidmigloz:opencv-android-gradle-repo:3.1.0"
    compile "com.google.guava:guava:18.0"
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Dependencies for local unit tests
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:2.0.2-beta"
    testCompile "org.slf4j:slf4j-api:1.7.21"
    testCompile "org.slf4j:slf4j-log4j12:1.7.21"
    testCompile "log4j:log4j:1.2.17"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

/*
Copy test resources directory (debug).
*/
task copyResDirectoryToDebugClasses(type: Copy) {
    from "${projectDir}/src/test/res"
    into "${buildDir}/intermediates/classes/test/debug/res"
}

/*
Copy test resources directory (release).
*/
task copyResDirectoryToReleaseClasses(type: Copy) {
    from "${projectDir}/src/test/res"
    into "${buildDir}/intermediates/classes/test/release/res"
}

/*
Run copy test resources directory tasks before build.
*/
afterEvaluate {
    preBuild.dependsOn(copyResDirectoryToDebugClasses)
    preBuild.dependsOn(copyResDirectoryToReleaseClasses)
}